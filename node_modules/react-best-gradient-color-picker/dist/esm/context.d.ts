import React, { ReactNode } from 'react';
export default function PickerContextWrapper({ value, bounds, children, onChange, squareSize, hideOpacity, squareHeight, }: PickerContextWrapperProps): React.JSX.Element;
export declare function usePicker(): PickerContextProps;
type PickerContextWrapperProps = {
    bounds: any;
    value: string;
    squareSize: number;
    children: ReactNode;
    squareHeight: number;
    hideOpacity: boolean;
    onChange: (arg0: string) => void;
};
export type PickerContextProps = {
    x?: number;
    y?: number;
    s: number;
    l: number;
    r: number;
    g: number;
    b: number;
    hue: number;
    hsvS: number;
    hsvV: number;
    value: string;
    colors: string[];
    degrees: number;
    inFocus: string | null;
    opacity: number;
    isMobile: boolean;
    onChange: (arg0: string) => void;
    addPoint: (arg0: any) => void;
    inputType: string;
    nextPoint: () => void;
    tinyColor: any;
    handleHue: (arg0: any) => void;
    setInFocus: (arg0: string | null) => void;
    isGradient: boolean;
    offsetLeft: number;
    squareSize: number;
    hideOpacity: boolean;
    handleColor: (arg0: any, arg1: any) => void;
    currentLeft: number;
    deletePoint: () => void;
    internalHue: number;
    squareHeight: number;
    setInputType: (arg0: string) => void;
    gradientType?: string;
    handleChange: (arg0: string) => void;
    currentColor: string;
    selectedColor: number;
    handleOpacity: (arg0: any) => void;
    setInternalHue: (arg0: number) => void;
    previousColors: string[];
    handleGradient: (arg0: string, arg1: number) => void;
    setSelectedColor: (arg0: number) => void;
    internalOnChange: (arg0: string) => void;
    previousGraidents: string[];
};
export {};
