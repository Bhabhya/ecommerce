import React, { useState, useEffect } from 'react';
import { formatInputValues, round } from '../utils/formatters.js';
import { rgb2cmyk, cmykToRgb } from '../utils/converters.js';
import { usePicker } from '../context.js';
import tc from 'tinycolor2';
const Input = ({ value, callback, max = 100, label, }) => {
    const [temp, setTemp] = useState(value);
    const { hideOpacity } = usePicker();
    const width = hideOpacity ? '22%' : '18%';
    useEffect(() => {
        setTemp(value);
    }, [value]);
    const onChange = (e) => {
        const newVal = formatInputValues(parseFloat(e.target.value), 0, max);
        setTemp(newVal);
        callback(newVal);
    };
    return (React.createElement("div", { style: { width: width } },
        React.createElement("input", { value: temp, id: "rbgcp-input", className: "rbgcp-input", onChange: (e) => onChange(e) }),
        React.createElement("div", { className: "rbgcp-input-label" }, label)));
};
const HexInput = () => {
    const { handleChange, tinyColor, opacity } = usePicker();
    const [disable, setDisable] = useState('');
    const hex = tinyColor.toHex();
    const [newHex, setNewHex] = useState(hex);
    useEffect(() => {
        if (disable !== 'hex') {
            setNewHex(hex);
        }
    }, [tinyColor, disable, hex]);
    const hexFocus = () => {
        setDisable('hex');
    };
    const hexBlur = () => {
        setDisable('');
    };
    const handleHex = (e) => {
        const tinyHex = tc(e.target.value);
        setNewHex(e.target.value);
        if (tinyHex.isValid()) {
            const { r, g, b } = tinyHex.toRgb();
            const newColor = `rgba(${r}, ${g}, ${b}, ${opacity})`;
            handleChange(newColor);
        }
    };
    return (React.createElement("div", { style: { width: '23%' } },
        React.createElement("input", { value: newHex, onChange: (e) => handleHex(e), id: "rbgcp-hex-input", onFocus: hexFocus, onBlur: hexBlur, className: "rbgcp-input rbgcp-hex-input" }),
        React.createElement("div", { className: "rbgcp-input-label" }, "HEX")));
};
const RGBInputs = () => {
    const { handleChange, r, g, b, opacity } = usePicker();
    const handleRgb = ({ r, g, b }) => {
        handleChange(`rgba(${r}, ${g}, ${b}, ${opacity})`);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Input, { value: r, callback: (newVal) => handleRgb({ r: newVal, g: g, b: b }), label: "R", max: 255 }),
        React.createElement(Input, { value: g, callback: (newVal) => handleRgb({ r: r, g: newVal, b: b }), label: "G", max: 255 }),
        React.createElement(Input, { value: b, callback: (newVal) => handleRgb({ r: r, g: g, b: newVal }), label: "B", max: 255 })));
};
const HSLInputs = () => {
    const { handleChange, s, l, internalHue, opacity, setInternalHue } = usePicker();
    const handleH = (h, s, l) => {
        setInternalHue(h);
        const { r, g, b } = tc({ h: h, s: s, l: l }).toRgb();
        handleChange(`rgba(${r}, ${g}, ${b}, ${opacity})`);
    };
    const handleSl = (value) => {
        const { r, g, b } = tc(value).toRgb();
        handleChange(`rgba(${r}, ${g}, ${b}, ${opacity})`);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Input, { value: round(internalHue), callback: (newVal) => handleH(newVal, s, l), label: "H", max: 360 }),
        React.createElement(Input, { value: round(s * 100), callback: (newVal) => handleSl({ h: internalHue, s: newVal, l: l }), label: "S" }),
        React.createElement(Input, { value: round(l * 100), callback: (newVal) => handleSl({ h: internalHue, s: s, l: newVal }), label: "L" })));
};
const HSVInputs = () => {
    const { handleChange, hsvS, hsvV, internalHue, setInternalHue, opacity } = usePicker();
    const handleH = (h, s, v) => {
        setInternalHue(h);
        const { r, g, b } = tc({ h: h, s: s, v: v }).toRgb();
        handleChange(`rgba(${r}, ${g}, ${b}, ${opacity})`);
    };
    const handleSV = (value) => {
        const { r, g, b } = tc(value).toRgb();
        handleChange(`rgba(${r}, ${g}, ${b}, ${opacity})`);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Input, { value: round(internalHue), callback: (newVal) => handleH(newVal, hsvS, hsvV), label: "H", max: 360 }),
        React.createElement(Input, { value: round(hsvS * 100), callback: (newVal) => handleSV({ h: internalHue, s: newVal, v: hsvV }), label: "S" }),
        React.createElement(Input, { value: round(hsvV * 100), callback: (newVal) => handleSV({ h: internalHue, s: hsvS, v: newVal }), label: "V" })));
};
const CMKYInputs = () => {
    const { handleChange, r, g, b, opacity } = usePicker();
    const { c, m, y, k } = rgb2cmyk(r, g, b);
    const handleCmyk = (value) => {
        const { r, g, b } = cmykToRgb(value);
        handleChange(`rgba(${r}, ${g}, ${b}, ${opacity})`);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Input, { value: round(c * 100), callback: (newVal) => handleCmyk({ c: newVal / 100, m: m, y: y, k: k }), label: "C" }),
        React.createElement(Input, { value: round(m * 100), callback: (newVal) => handleCmyk({ c: c, m: newVal / 100, y: y, k: k }), label: "M" }),
        React.createElement(Input, { value: round(y * 100), callback: (newVal) => handleCmyk({ c: c, m: m, y: newVal / 100, k: k }), label: "Y" }),
        React.createElement(Input, { value: round(k * 100), callback: (newVal) => handleCmyk({ c: c, m: m, y: y, k: newVal / 100 }), label: "K" })));
};
const Inputs = () => {
    const { handleChange, r, g, b, opacity, inputType, hideOpacity } = usePicker();
    return (React.createElement("div", { style: {
            paddingTop: 14,
            display: 'flex',
            justifyContent: 'space-between',
        }, id: "rbgcp-inputs-wrap", className: "rbgcp-inputs-wrap" },
        inputType !== 'cmyk' && React.createElement(HexInput, null),
        inputType === 'hsl' && React.createElement(HSLInputs, null),
        inputType === 'rgb' && React.createElement(RGBInputs, null),
        inputType === 'hsv' && React.createElement(HSVInputs, null),
        inputType === 'cmyk' && React.createElement(CMKYInputs, null),
        !hideOpacity && (React.createElement(Input, { value: Math.round(opacity * 100), callback: (newVal) => handleChange(`rgba(${r}, ${g}, ${b}, ${newVal / 100})`), label: "A" }))));
};
export default Inputs;
