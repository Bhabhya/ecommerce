import React from 'react';
import { usePicker } from '../context.js';
import { formatInputValues } from '../utils/formatters.js';
import { controlBtnStyles } from './Controls.js';
import TrashIcon, { LinearIcon, RadialIcon, DegreesIcon, StopIcon, } from './icon.js';
const GradientType = () => {
    const { gradientType, internalOnChange, value } = usePicker();
    const isLinear = gradientType === 'linear-gradient';
    const isRadial = gradientType === 'radial-gradient';
    const handleLinear = () => {
        const remaining = value.split(/,(.+)/)[1];
        internalOnChange(`linear-gradient(90deg, ${remaining}`);
    };
    const handleRadial = () => {
        const remaining = value.split(/,(.+)/)[1];
        internalOnChange(`radial-gradient(circle, ${remaining}`);
    };
    return (React.createElement("div", { className: "rbgcp-control-btn-wrapper" },
        React.createElement("div", { onClick: handleLinear, id: "rbgcp-linear-btn", className: `rbgcp-control-btn rbgcp-linear-btn ${isLinear && 'rbgcp-control-btn-selected'}` },
            React.createElement(LinearIcon, { color: isLinear ? '#568CF5' : '' })),
        React.createElement("div", { onClick: handleRadial, id: "rbgcp-gradient-btn", className: `rbgcp-control-btn rbgcp-gradient-btn ${isRadial && 'rbgcp-control-btn-selected'}` },
            React.createElement(RadialIcon, { color: isRadial ? '#568CF5' : '' }))));
};
const StopPicker = () => {
    const { currentLeft, handleGradient, currentColor } = usePicker();
    const handleMove = (newVal) => {
        handleGradient(currentColor, formatInputValues(parseInt(newVal), 0, 100));
    };
    return (React.createElement("div", { className: "rbgcp-control-btn-wrapper rbgcp-control-input-wrap rbgcp-stop-input-wrap", style: { paddingLeft: 8 } },
        React.createElement(StopIcon, null),
        React.createElement("input", { id: "rbgcp-stop-input", value: currentLeft, className: "rbgcp-control-input rbgcp-stop-input", onChange: (e) => handleMove(e.target.value) })));
};
const DegreePicker = () => {
    const { degrees, internalOnChange, value } = usePicker();
    const handleDegrees = (e) => {
        const newValue = formatInputValues(e.target.value, 0, 360);
        const remaining = value.split(/,(.+)/)[1];
        internalOnChange(`linear-gradient(${newValue || 0}deg, ${remaining}`);
    };
    return (React.createElement("div", { className: "rbgcp-control-btn-wrapper rbgcp-control-input-wrap rbgcp-degree-input-wrap" },
        React.createElement(DegreesIcon, null),
        React.createElement("input", { id: "rbgcp-degree-input", value: degrees, className: "rbgcp-control-input rbgcp-degree-input", onChange: (e) => handleDegrees(e) }),
        React.createElement("div", { style: {
                position: 'absolute',
                right: degrees > 99 ? 0 : degrees < 10 ? 7 : 3,
                top: 1,
                fontWeight: 400,
                fontSize: 13,
            }, className: "rbgcp-degree-icon" }, "\u00B0")));
};
const DeconsteBtn = () => {
    const { deletePoint } = usePicker();
    return (React.createElement("div", { onClick: deletePoint, style: { width: 28, ...controlBtnStyles(false) }, id: "rbgcp-point-deconste-btn", className: "rbgcp-control-icon-btn rbgcp-point-deconste-btn" },
        React.createElement(TrashIcon, null)));
};
const GradientControls = ({ hideGradientType, hideGradientAngle, hideGradientStop, }) => {
    const { gradientType } = usePicker();
    return (React.createElement("div", { style: {
            marginTop: 12,
            marginBottom: -4,
            paddingLeft: hideGradientType ? 4 : 0,
        }, id: "rbgcp-gradient-controls-wrap", className: "rbgcp-control-btn-wrapper jsb" },
        !hideGradientType && React.createElement(GradientType, null),
        React.createElement("div", { style: { width: 53 } }, !hideGradientAngle && gradientType === 'linear-gradient' && (React.createElement(DegreePicker, null))),
        !hideGradientStop && React.createElement(StopPicker, null),
        React.createElement(DeconsteBtn, null)));
};
export default GradientControls;
