"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const context_js_1 = require("../context.js");
const utils_js_1 = require("../utils/utils.js");
const usePaintHue_js_1 = require("../hooks/usePaintHue.js");
const tinycolor2_1 = __importDefault(require("tinycolor2"));
const AdvBar = ({ value, callback, reffy, openAdvanced, label, }) => {
    const { squareSize } = (0, context_js_1.usePicker)();
    const [dragging, setDragging] = (0, react_1.useState)(false);
    const [handleTop, setHandleTop] = (0, react_1.useState)(2);
    // const sliderId = `${label?.toLowerCase()}Handle`
    const left = value * (squareSize - 18);
    (0, react_1.useEffect)(() => {
        setHandleTop(reffy?.current?.offsetTop - 2);
    }, [openAdvanced, reffy]);
    const stopDragging = () => {
        setDragging(false);
    };
    const handleMove = (e) => {
        if (dragging) {
            callback((0, utils_js_1.getHandleValue)(e));
        }
    };
    const handleClick = (e) => {
        if (!dragging) {
            callback((0, utils_js_1.getHandleValue)(e));
        }
    };
    const handleDown = () => {
        setDragging(true);
    };
    (0, react_1.useEffect)(() => {
        const handleUp = () => {
            stopDragging();
        };
        window.addEventListener('mouseup', handleUp);
        return () => {
            window.removeEventListener('mouseup', handleUp);
        };
    }, []);
    return (react_1.default.createElement("div", { style: { width: '100%', padding: '3px 0px 3px 0px' } },
        react_1.default.createElement("div", { className: "c-resize ps-rl", onMouseMove: (e) => handleMove(e) },
            react_1.default.createElement("div", { style: { left, top: handleTop }, onMouseDown: handleDown, className: "rbgcp-handle", role: "button", tabIndex: 0 }),
            react_1.default.createElement("div", { style: {
                    textAlign: 'center',
                    color: '#fff',
                    fontSize: 12,
                    fontWeight: 500,
                    lineHeight: 1,
                    position: 'absolute',
                    left: '50%',
                    transform: 'translate(-50%, 0%)',
                    top: handleTop + 2,
                    zIndex: 10,
                    textShadow: '1px 1px 1px rgba(0,0,0,.6)',
                }, onMouseMove: (e) => handleMove(e), onClick: (e) => handleClick(e) }, label),
            react_1.default.createElement("canvas", { ref: reffy, width: `${squareSize}px`, height: "14px", style: { position: 'relative', borderRadius: 14 }, onClick: (e) => handleClick(e) }))));
};
const AdvancedControls = ({ openAdvanced }) => {
    const { tinyColor, hue, l, handleChange, s, opacity, squareSize } = (0, context_js_1.usePicker)();
    const { v, s: vs } = tinyColor.toHsv();
    const satRef = (0, react_1.useRef)(null);
    const lightRef = (0, react_1.useRef)(null);
    const brightRef = (0, react_1.useRef)(null);
    (0, usePaintHue_js_1.usePaintSat)(satRef, hue, l * 100, squareSize);
    (0, usePaintHue_js_1.usePaintLight)(lightRef, hue, s * 100, squareSize);
    (0, usePaintHue_js_1.usePaintBright)(brightRef, hue, s * 100, squareSize);
    const satDesat = (value) => {
        const { r, g, b } = (0, tinycolor2_1.default)({ h: hue, s: value / 100, l }).toRgb();
        handleChange(`rgba(${r},${g},${b},${opacity})`);
    };
    const setLight = (value) => {
        const { r, g, b } = (0, tinycolor2_1.default)({ h: hue, s, l: value / 100 }).toRgb();
        handleChange(`rgba(${r},${g},${b},${opacity})`);
    };
    const setBright = (value) => {
        const { r, g, b } = (0, tinycolor2_1.default)({ h: hue, s: vs * 100, v: value }).toRgb();
        handleChange(`rgba(${r},${g},${b},${opacity})`);
    };
    return (react_1.default.createElement("div", { style: {
            height: openAdvanced ? 98 : 0,
            width: '100%',
            transition: 'all 120ms linear',
        } },
        react_1.default.createElement("div", { style: {
                paddingTop: 11,
                display: openAdvanced ? 'flex' : 'none',
                flexDirection: 'column',
                justifyContent: 'space-between',
                height: openAdvanced ? 98 : 0,
                overflow: 'hidden',
                transition: 'height 100ms linear',
            } },
            react_1.default.createElement(AdvBar, { value: s, reffy: satRef, callback: satDesat, openAdvanced: openAdvanced, label: "Saturation" }),
            react_1.default.createElement(AdvBar, { value: l, reffy: lightRef, label: "Lightness", callback: setLight, openAdvanced: openAdvanced }),
            react_1.default.createElement(AdvBar, { value: v, reffy: brightRef, label: "Brightness", callback: setBright, openAdvanced: openAdvanced }))));
};
exports.default = AdvancedControls;
