"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const usePaintSquare_js_1 = __importDefault(require("../hooks/usePaintSquare.js"));
const lodash_throttle_1 = __importDefault(require("lodash.throttle"));
const context_js_1 = require("../context.js");
const Square = () => {
    const { x, y, isMobile, squareSize, handleColor, internalHue, squareHeight } = (0, context_js_1.usePicker)();
    const [dragging, setDragging] = (0, react_1.useState)(false);
    const canvas = (0, react_1.useRef)(null);
    (0, usePaintSquare_js_1.default)(canvas, internalHue, squareSize, squareHeight);
    const handleChange = (e) => {
        const ctx = canvas?.current?.getContext('2d', { willReadFrequently: true });
        const onMouseMove = (0, lodash_throttle_1.default)(() => handleColor(e, ctx), 100);
        // handleColor(e, ctx)
        onMouseMove();
    };
    const stopDragging = () => {
        setDragging(false);
        document.body.style.overflow = 'auto';
    };
    const handleMove = (e) => {
        if (dragging && !isMobile) {
            handleChange(e);
        }
    };
    const handleTouchMove = (e) => {
        if (dragging && isMobile) {
            document.body.style.overflow = 'hidden';
            handleChange(e);
        }
    };
    const handleClick = (e) => {
        if (!dragging) {
            handleChange(e);
        }
    };
    const handleMouseDown = () => {
        setDragging(true);
    };
    const handleCanvasDown = (e) => {
        setDragging(true);
        handleChange(e);
    };
    (0, react_1.useEffect)(() => {
        const handleUp = () => {
            stopDragging();
        };
        window.addEventListener('mouseup', handleUp);
        return () => {
            window.removeEventListener('mouseup', handleUp);
        };
    }, []);
    return (react_1.default.createElement("div", { style: { position: 'relative' } },
        react_1.default.createElement("div", { className: "ps-rl c-cross", onMouseUp: stopDragging, onTouchEnd: stopDragging, onMouseDown: handleCanvasDown, onTouchStart: handleCanvasDown, onMouseMove: (e) => handleMove(e), onTouchMove: (e) => handleTouchMove(e) },
            react_1.default.createElement("div", { className: "rbgcp-handle", style: { left: x, top: y }, onMouseDown: handleMouseDown, role: "button", tabIndex: 0 }),
            react_1.default.createElement("div", { className: "rbgcp-canvas-wrapper", style: { height: squareHeight }, onClick: (e) => handleClick(e) },
                react_1.default.createElement("canvas", { ref: canvas, width: `${squareSize}px`, height: `${squareHeight}px`, id: "paintSquare" })))));
};
exports.default = Square;
