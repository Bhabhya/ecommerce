"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const context_js_1 = require("../context.js");
const usePaintHue_js_1 = __importDefault(require("../hooks/usePaintHue.js"));
const Hue = () => {
    const barRef = (0, react_1.useRef)(null);
    const { handleHue, internalHue, squareSize } = (0, context_js_1.usePicker)();
    const [dragging, setDragging] = (0, react_1.useState)(false);
    (0, usePaintHue_js_1.default)(barRef, squareSize);
    // useEffect(() => {
    //   if (barRef?.current) {
    //     setHandleTop(barRef?.current?.offsetTop - 2)
    //   }
    // }, [barRef])
    const stopDragging = () => {
        setDragging(false);
    };
    const handleDown = () => {
        setDragging(true);
    };
    const handleMove = (e) => {
        if (dragging) {
            handleHue(e);
        }
    };
    const handleClick = (e) => {
        if (!dragging) {
            handleHue(e);
        }
    };
    (0, react_1.useEffect)(() => {
        const handleUp = () => {
            stopDragging();
        };
        window.addEventListener('mouseup', handleUp);
        return () => {
            window.removeEventListener('mouseup', handleUp);
        };
    }, []);
    return (react_1.default.createElement("div", { style: { height: 14, marginTop: 17, marginBottom: 4 }, onMouseMove: (e) => handleMove(e), className: "c-resize ps-rl" },
        react_1.default.createElement("div", { role: "button", style: {
                border: '2px solid white',
                borderRadius: '50%',
                boxShadow: '0px 0px 3px rgba(0, 0, 0, 0.5)',
                width: '18px',
                height: '18px',
                zIndex: 1000,
                transition: 'all 10ms linear',
                position: 'absolute',
                left: internalHue * ((squareSize - 18) / 360),
                top: -2,
            }, onMouseDown: handleDown }),
        react_1.default.createElement("canvas", { ref: barRef, width: `${squareSize}px`, height: "14px", style: { position: 'relative', borderRadius: 14, verticalAlign: 'top' }, onClick: (e) => handleClick(e) })));
};
exports.default = Hue;
